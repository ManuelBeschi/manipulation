
classdef Location < ros.Message
    %Location MATLAB implementation of manipulation_msgs/Location
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'manipulation_msgs/Location' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'bb54b8ed93f2e9fcc9305e900eda57dd' % The MD5 Checksum of the message definition
        PropertyList = { 'Pose' 'ApproachRelativePose' 'ReturnRelativePose' 'Id' 'Frame' } % List of non-constant message properties
        ROSPropertyList = { 'pose' 'approach_relative_pose' 'return_relative_pose' 'id' 'frame' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
			 'ros.msggen.geometry_msgs.Pose' ...
			 'ros.msggen.geometry_msgs.Pose' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Pose
        ApproachRelativePose
        ReturnRelativePose
        Id
        Frame
    end
    methods
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Location', 'Pose')
            obj.Pose = val;
        end
        function set.ApproachRelativePose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Location', 'ApproachRelativePose')
            obj.ApproachRelativePose = val;
        end
        function set.ReturnRelativePose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Location', 'ReturnRelativePose')
            obj.ReturnRelativePose = val;
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Location', 'Id');
            obj.Id = char(val);
        end
        function set.Frame(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Location', 'Frame');
            obj.Frame = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.manipulation_msgs.Location.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.manipulation_msgs.Location;
            obj.reload(strObj);
        end
    end
end
